- pre 16.8 no hooks, so need class based to handle state and effects. 
- class based cannot be used in a hook
- render() when comp used in jsx to show what is on screen (like return)
- extend component class - allows you to use this.props (as property in class)
- need to initialize state and then update it. State needs to be an object and called 'state'
- use setState inherited from parent class, and it will merge not OVERRIDE state
    - supports function update method
- when method called on event, 'this' inside class does not refer to class, so need to bind 'this' to method
- lifecycle
    - didMount(): when component evaulated and rendered, like useEffect() with no dep array
        - only runs after the first time
    - didUpdate(): something changed, evaluated and re-rendered, like useEffect() WITH dep array, so re-render
        - received prev state and prev props as argument so can prevent infinite render loop
        - useEffect handles this with with dependencies, so its better
    - willUnmount(): right before removed from DOM, like clean up of useEffect()
- Using context
    - could add consumer and wrap class based components
    - CANNOT call multiple contexts, can only connect to one
    - make static keyword (ONCE) and point it to imported context
- Error boundaries
    - If error is in child component, cant catch in parent, because returning JSX and cant use try/catch
    - didCatch(), receives error as arg, it will make class based component the error boundary, when child throws error
    - Wrap around components that might throw error you want to handle